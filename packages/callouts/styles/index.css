@import './_temp-reset.css';
@import './_temp-spacing-tokens.css';
@import '../partials/callout-item/style.css';

.g-callouts {
  /* Spacing */

  /* Below assumes we set { preserve: true } for our CSS custom properties plugin,
  or even better, use an IE11-specific polyfill so we can use custom properties as they're intended to be used */
  padding-top: var(--space-block-padding);
  padding-bottom: var(--space-block-padding);

  /* Theming */
  &.theme-light {
    background: var(--white);
  }
  &.theme-gray {
    background: var(--gray-6);
  }
  &.theme-dark {
    background: var(--black);
  }

  & > .g-grid-container {
    /* Heading and subheading styling + centering */
    & > .headings {
      margin-bottom: var(--space-display-2--content);
      text-align: left;

      & > h2 {
        max-width: 38em;
        &.theme-light,
        &.theme-gray {
          color: var(--gray-1);
        }
        &.theme-dark {
          color: var(--white);
        }
        &.centered {
          text-align: center;
          margin-left: auto;
          margin-right: auto;
        }
      }

      & > p {
        margin-top: var(--space-display-2--body-large);
        max-width: 38em;
        &.theme-light,
        &.theme-gray {
          color: var(--gray-2);
        }
        &.theme-dark {
          color: var(--gray-5);
        }
        &.centered {
          text-align: center;
          margin-left: auto;
          margin-right: auto;
        }
      }
    }

    /*
    LAYOUT STYLES

    The styles below create a grid layout with flexbox (because CSS grid is no good on IE11)
    Each "wrapper" flex item (.callout-item-wrapper) holds a "grid item" (.callout-item),
    and creates the grid-gap with its padding + its siblings' padding (left & right padding for column-gap, top & bottom for row-gap)
    while the flex "container" (.items) uses a negative margin to compensate for the extraneous padding at the edges of the grid
    ---
    Hopefully this helps explain how we arrive at the styles below, given the desired grid gaps from design side:
    - .layout-two-up   : 32px gap                       =>  -16px margin & 16px padding
    - .layout-three-up : 48px row gap, 64px column gap  =>  -24px -32px margin & 24px 32px padding
    - .layout-four-up  : 48px row gap, 64px column gap  =>  -24px -32px margin & 24px 32px padding
    ---
    With this approach in place, we can also change the number of "grid columns" by modifying the % width of the "wrapper" items
    The columns vary per layout and viewport size. 50% = 2 colums, 33.33% = 3 columns, 25% = 4 columns, etc
    */

    & > .items {
      position: relative;
      display: flex;
      flex-wrap: wrap;

      & .callout-item-wrapper {
        display: flex;
        width: 100%;
      }

      &.layout-two-up {
        margin: calc(var(--space-grid-gap) / -2);
        & > .callout-item-wrapper {
          padding: calc(var(--space-grid-gap) / 2);
          @media (--large) {
            width: 50%;
          }
        }
      }

      &.layout-three-up {
        margin: calc(var(--space-columns-three) / -2);
        & > .callout-item-wrapper {
          padding: calc(var(--space-columns-three) / 2);
          @media (--medium-up) {
            width: 33.33%;
          }
        }
      }

      &.layout-four-up {
        margin: calc(var(--space-columns-four) / -2);
        & > .callout-item-wrapper {
          padding: calc(var(--space-columns-four) / 2);
          @media (min-width: 640px) {
            width: 50%;
          }
          @media (--large) {
            width: 25%;
          }
        }
      }
    }
  }
}
