/* Additional composition is helpful here,
as we can't use CSS custom properties as nicely as
usual since .dialogArrow is rendered into a Portal. */
.theme {
  --overlay-color: transparent;

  &.light {
    --background-color: var(--white);
    --box-shadow: 0 10px 50px rgba(0, 0, 0, 0.25);
    --close-icon-color: var(--gray-3);
  }

  &.dark {
    --background-color: var(--gray-1);
    --box-shadow: 0 10px 50px rgba(255, 255, 255, 0);
    --close-icon-color: var(--gray-4);
  }
}

.trigger {
  border: 1px solid red;
}

.popover {
  composes: theme;

  /* top & left positioning is done in JS,
    via @reach/popovers built-in `position` prop */
  position: fixed;

  /* --collision-buffer is set in JS, as it is
  used for dynamic positioning calculations */
  --max-collision-width: calc(100vw - calc(var(--collision-buffer) * 2));

  border-radius: 2px;
  background: var(--background-color);
  max-width: min(26rem, var(--max-collision-width));
  text-align: left;

  /* More right padding accounts for "close" button */
  padding: 20px 40px 20px 20px;
  outline: none;
  box-shadow: var(--box-shadow);
}

.dialogArrow {
  composes: theme;
  position: fixed;

  /* --top, --left, and --arrow-size
   are set in JS, to allow for dynamic,
   collision-free positioning. */
  top: var(--top);
  left: var(--left);
  width: 0;
  height: 0;
  border-left: var(--arrow-size) solid transparent;
  border-right: var(--arrow-size) solid transparent;
  border-bottom: var(--arrow-size) solid var(--background-color);
}

.dialogClose {
  composes: theme;
  color: var(--close-icon-color);
  padding: 0;
  background: none;
  border: none;
  position: absolute;
  top: 12px;
  right: 12px;
  font-size: 2rem;
  line-height: 1rem;
  cursor: pointer;

  & svg {
    display: block;
    width: 24px;
    height: 24px;
    & [fill] {
      fill: var(--close-icon-color);
    }

    & [stroke] {
      stroke: var(--close-icon-color);
    }
  }
}
